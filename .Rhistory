temp2 <- as.data.frame(carlistex[[i]][,9][2])
tmp3 <- as.matrix(temp2)
tmp4 <- rbind(tmp2,tmp3)
leafletProxy("map", data = alarm_rate_Pct1_car) %>%
#   #clearShapes() %>%
addPolylines(data = tmp2, color =colfunc(as.numeric(carlistex[[i]][1,8])), weight = 1.5, layerId=c(carlistex[[i]][1,1][1],carlistex[[i]][1,2][1]), popup = as.character(tagList(
tags$strong(HTML(sprintf("%s",
carlistex[[i]][1,1]
))), tags$br(),
sprintf("Route: %s", carlistex[[i]][1,1]), tags$br(),
sprintf("Carrier: %s", carlistex[[i]][1,2]), tags$br(),
sprintf("Origin: %s", carlistex[[i]][1,3]), tags$br(),
sprintf("Destination: %s", carlistex[[i]][1,4]), tags$br(),
sprintf("Shipments: %s", carlistex[[i]][1,5]), tags$br(),
sprintf("Alarms: %s", carlistex[[i]][1,6]), tags$br(),
sprintf("Alarm Rate: %.1f %%", as.numeric(carlistex[[i]][1,8]))
)))%>%
addPolylines(data = tmp3, color =colfunc(as.numeric(carlistex[[i]][1,8])), weight = 1.5, layerId=c(carlistex[[i]][1,1][2],carlistex[[i]][1,2][2]), popup = as.character(tagList(
tags$strong(HTML(sprintf("%s",
carlistex[[i]][1,1]
))), tags$br(),
sprintf("Route: %s", carlistex[[i]][1,1]), tags$br(),
sprintf("Carrier: %s", carlistex[[i]][1,2]), tags$br(),
sprintf("Origin: %s", carlistex[[i]][1,3]), tags$br(),
sprintf("Destination: %s", carlistex[[i]][1,4]), tags$br(),
sprintf("Shipments: %s", carlistex[[i]][1,5]), tags$br(),
sprintf("Alarms: %s", carlistex[[i]][1,6]), tags$br(),
sprintf("Alarm Rate: %.1f %%", as.numeric(carlistex[[i]][1,8]))
)))%>%
addLegend("bottomleft", pal=colfunc, values=0:100, bins=10, labFormat = labelFormat(suffix="%"), title="Alarm Rates",
layerId="colorLegend")
}
else {
leafletProxy("map", data = alarm_rate_Pct1_car) %>%
#   #clearShapes() %>%
addPolylines(data = unlist(cbind(as.numeric(carlistex[[i]][,9]), as.numeric(carlistex[[i]][,10]))), color =colfunc(as.numeric(carlistex[[i]][1,8])), weight = 1.5, layerId=c(carlistex[[i]][1,1],carlistex[[i]][1,2]), popup = as.character(tagList(
tags$strong(HTML(sprintf("%s",
carlistex[[i]][1,1]
))), tags$br(),
sprintf("Route: %s", carlistex[[i]][1,1]), tags$br(),
sprintf("Carrier: %s", carlistex[[i]][1,2]), tags$br(),
sprintf("Origin: %s", carlistex[[i]][1,3]), tags$br(),
sprintf("Destination: %s", carlistex[[i]][1,4]), tags$br(),
sprintf("Shipments: %s", carlistex[[i]][1,5]), tags$br(),
sprintf("Alarms: %s", carlistex[[i]][1,6]), tags$br(),
sprintf("Alarm Rate: %.1f %%", as.numeric(carlistex[[i]][1,8]))
)))%>%
addLegend("bottomleft", pal=colfunc, values=0:100, bins=10, labFormat = labelFormat(suffix="%"), title="Alarm Rates",
layerId="colorLegend")}
}} }
}
else if(input$viewchange == "Container")
{
for(i in 1:nrow(cleancontainerroutes2)) {
if(input$alarmpct > as.numeric(conlistex[[i]][1,8]) || input$shipments > as.numeric(conlistex[[i]][1,5]) || (input$origin != "All Origins" && input$origin != as.character(conlistex[[i]][1,3])) || (input$destination != "All Destinations" && input$destination != as.character(conlistex[[i]][1,4])))
{}
else {
if(input$color != as.character(conlistex[[i]][1,2]) && input$color != "All Containers")
{}
else {
if(ncol(conlistex[[i]]) < 10){
temp <- as.data.frame(conlistex[[i]][,9][1])
tmp2 <- as.matrix(temp)
temp2 <- as.data.frame(conlistex[[i]][,9][2])
tmp3 <- as.matrix(temp2)
tmp4 <- rbind(tmp2,tmp3)
leafletProxy("map", data = alarm_rate_Pct1_con) %>%
#   #clearShapes() %>%
addPolylines(data = tmp2, color =colfunc(as.numeric(conlistex[[i]][1,8])), weight = 1.5, layerId=c(conlistex[[i]][1,1][1],conlistex[[i]][1,2][1]), popup = as.character(tagList(
tags$strong(HTML(sprintf("%s",
conlistex[[i]][1,1]
))), tags$br(),
sprintf("Route: %s", conlistex[[i]][1,1]), tags$br(),
sprintf("Container: %s", conlistex[[i]][1,2]), tags$br(),
sprintf("Origin: %s", conlistex[[i]][1,3]), tags$br(),
sprintf("Destination: %s", conlistex[[i]][1,4]), tags$br(),
sprintf("Shipments: %s", conlistex[[i]][1,5]), tags$br(),
sprintf("Alarms: %s", conlistex[[i]][1,6]), tags$br(),
sprintf("Alarm Rate: %.1f %%", as.numeric(conlistex[[i]][1,8]))
)))%>%
addPolylines(data = tmp3, color =colfunc(as.numeric(conlistex[[i]][1,8])), weight = 1.5, layerId=c(conlistex[[i]][1,1][2],conlistex[[i]][1,2][2]), popup = as.character(tagList(
tags$strong(HTML(sprintf("%s",
conlistex[[i]][1,1]
))), tags$br(),
sprintf("Route: %s", conlistex[[i]][1,1]), tags$br(),
sprintf("Container: %s", conlistex[[i]][1,2]), tags$br(),
sprintf("Origin: %s", conlistex[[i]][1,3]), tags$br(),
sprintf("Destination: %s", conlistex[[i]][1,4]), tags$br(),
sprintf("Shipments: %s", conlistex[[i]][1,5]), tags$br(),
sprintf("Alarms: %s", conlistex[[i]][1,6]), tags$br(),
sprintf("Alarm Rate: %.1f %%", as.numeric(conlistex[[i]][1,8]))
)))%>%
addLegend("bottomleft", pal=colfunc, values=0:100, bins=10, labFormat = labelFormat(suffix="%"), title="Alarm Rates",
layerId="colorLegend")
}
else {
leafletProxy("map", data = alarm_rate_Pct1_con) %>%
#   #clearShapes() %>%
addPolylines(data = unlist(cbind(as.numeric(conlistex[[i]][,9]), as.numeric(conlistex[[i]][,10]))), color =colfunc(as.numeric(conlistex[[i]][1,8])), weight = 1.5, layerId=c(conlistex[[i]][1,1],conlistex[[i]][1,2]), popup = as.character(tagList(
tags$strong(HTML(sprintf("%s",
conlistex[[i]][1,1]
))), tags$br(),
sprintf("Route: %s", conlistex[[i]][1,1]), tags$br(),
sprintf("Container: %s", conlistex[[i]][1,2]), tags$br(),
sprintf("Origin: %s", conlistex[[i]][1,3]), tags$br(),
sprintf("Destination: %s", conlistex[[i]][1,4]), tags$br(),
sprintf("Shipments: %s", conlistex[[i]][1,5]), tags$br(),
sprintf("Alarms: %s", conlistex[[i]][1,6]), tags$br(),
sprintf("Alarm Rate: %.1f %%", as.numeric(conlistex[[i]][1,8]))
)))%>%
addLegend("bottomleft", pal=colfunc, values=0:100, bins=10, labFormat = labelFormat(suffix="%"), title="Alarm Rates",
layerId="colorLegend")}
}} }
}
}
})
# # Show a popup at the given location
# showZipcodePopup <- function(zipcode, lat, lng) {
#   selectedLoc <- site[allzips$zipcode == zipcode,]
#   content <- as.character(tagList(
#     tags$h4("Score:", as.integer(selectedZip$centile)),
#     tags$strong(HTML(sprintf("%s, %s %s",
#       selectedZip$city.x, selectedZip$state.x, selectedZip$zipcode
#     ))), tags$br(),
#     sprintf("Median household income: %s", dollar(selectedZip$income * 1000)), tags$br(),
#     sprintf("Percent of adults with BA: %s%%", as.integer(selectedZip$college)), tags$br(),
#     sprintf("Adult population: %s", selectedZip$adultpop)
#   ))
#   leafletProxy("map") %>% addPopups(lng, lat, content, layerId = zipcode)
# }
#
# # When map is clicked, show a popup with city info
# observe({
#   leafletProxy("map") %>% clearPopups()
#   event <- input$map_shape_click
#   if (is.null(event))
#     return()
#
#   isolate({
#     showZipcodePopup(event$id, event$lat, event$lng)
#   })
# })
showLocationPopup <- function(country_Desc, lat, lng) {
selectedLoc <- site_locations[site_locations$country_Desc == country_Desc,]
content <- as.character(tagList(
tags$strong(HTML(sprintf("%s, %s",
selectedLoc$country_Desc, selectedLoc$Country
))), tags$br(),
sprintf("Location: %s", selectedLoc$country_Desc), tags$br(),
sprintf("Country: %s", selectedLoc$Country)
))
leafletProxy("map")
#%>% addPopups(lng, lat, content, layerId = country_Desc)
}
# showLocationPopup <- function(id, lat, lng) {
#   selectedLoc <- realtest3[realtest3$id == id,]
#   content <- as.character(tagList(
#     tags$strong(HTML(sprintf("%s, %s",
#                              selectedLoc$id, selectedLoc$id
#     ))), tags$br(),
#     sprintf("Location: %s", selectedLoc$id), tags$br(),
#     sprintf("Country: %s", selectedLoc$id)
#
#   ))
#   leafletProxy("map") %>% addPopups(lng, lat, content, layerId = id)
# }
# When map is clicked, show a popup with city info
observe({
leafletProxy("map") %>% clearPopups()
event <- input$map_shape_click
if (is.null(event))
return()
isolate({
showLocationPopup(event$id, event$lat, event$lng)
})
})
#ROUTE POP UP WORK
# showRoutePopup <- function(route, lat, lng) {
#   selectedRoute <- outlist2[[1]][1,1:2]== route
#   content <- as.character(tagList(
#     tags$strong(HTML(sprintf("%s, %s",
#                              selectedRoute[1], selectedRoute[2]
#     ))), tags$br(),
#     sprintf("Origin: %s", selectedRoute[1]), tags$br(),
#     sprintf("Destination: %s", selectedRoute[2])
#
#   ))
#   leafletProxy("map") %>% addPopups(lng, lat, content, layerId = outlist2)
# }
#
# observe({
#   leafletProxy("map") %>% clearPopups()
#   event2 <- input$map_shape_click
#   if (is.null(event2))
#     return()
#
#   isolate({
#     showRoutePopup(event2$id, event2$lat, event2$lng)
#   })
# })
#Info Box Calculations
output$shipmentBox <- renderValueBox({
if(input$exclusions == FALSE){
data <- uniqshipments %>% select(shipmentid,
shipmentshippeddate,
shipmentcarrierdesc,
shipmentcontainerdesc,
shipmentorigindesc,
shipmentdestinationdesc,
shipmentitemproductdesc,
route,Alarm.Triggered,
Count.of.alarms)
}
else if(input$exclusions == TRUE){
data <- uniqshipments5 %>% select(shipmentid,
shipmentshippeddate,
shipmentcarrierdesc,
shipmentcontainerdesc,
shipmentorigindesc,
shipmentdestinationdesc,
shipmentitemproductdesc,
route,Alarm.Triggered,
Count.of.alarms)
}
if (input$origin != "All Origins") {
data <- data[data$shipmentorigindesc == input$origin,]
}
if (input$destination != "All Destinations") {
data <- data[data$shipmentdestinationdesc == input$destination,]
}
if (input$viewchange != "All" && input$viewchange != "Carrier" && input$viewchange != "Container")
{
if(input$prod != "All Products")
{
data <- data[data$shipmentitemproductdesc == input$prod,]
}
}
if (input$carrier != "All Carriers") {
data <- data[data$shipmentcarrierdesc == input$carrier,]
}
if (input$color != "All Containers") {
data <- data[data$shipmentcontainerdesc == input$color,]
}
# if (input$shipmentRootCauseofTempExcursionDesc != "All") {
#   data <- data[data$ShipmentRootCauseofTempExcursionDesc == input$shipmentRootCauseofTempExcursionDesc,]
#}
valueBox(
nrow(data), "Total Shipments", icon = icon("plane"),
color = "purple"
)
})
output$alarmBox <- renderValueBox({
if(input$exclusions == FALSE){
data2 <- uniqshipments %>% select(shipmentid,
shipmentshippeddate,
shipmentcarrierdesc,
shipmentcontainerdesc,
shipmentorigindesc,
shipmentdestinationdesc,
shipmentitemproductdesc,
route,Alarm.Triggered,
Count.of.alarms)
}
else if(input$exclusions == TRUE){
data2 <- uniqshipments5 %>% select(shipmentid,
shipmentshippeddate,
shipmentcarrierdesc,
shipmentcontainerdesc,
shipmentorigindesc,
shipmentdestinationdesc,
shipmentitemproductdesc,
route,Alarm.Triggered,
Count.of.alarms)
}
if (input$origin != "All Origins") {
data2 <- data2[data2$shipmentorigindesc == input$origin,]
}
if (input$destination != "All Destinations") {
data2 <- data2[data2$shipmentdestinationdesc == input$destination,]
}
if (input$viewchange != "All" && input$viewchange != "Carrier" && input$viewchange != "Container")
{
if(input$prod != "All Products")
{
data2 <- data2[data2$shipmentitemproductdesc == input$prod,]
}
}
if (input$carrier != "All Carriers") {
data2 <- data2[data2$shipmentcarrierdesc == input$carrier,]
}
if (input$color != "All Containers") {
data2 <- data2[data2$shipmentcontainerdesc == input$color,]
}
data2 <- data2[data2$Alarm.Triggered == TRUE,]
valueBox(
nrow(data2), "Shipments with Alarms", icon = icon("bell"),
color = "yellow"
)
})
output$pctBox <- renderInfoBox({
if(input$exclusions == FALSE){
data <- uniqshipments %>% select(shipmentid,
shipmentshippeddate,
shipmentcarrierdesc,
shipmentcontainerdesc,
shipmentorigindesc,
shipmentdestinationdesc,
shipmentitemproductdesc,
route,Alarm.Triggered,
Count.of.alarms)
}
else if(input$exclusions == TRUE){
data <- uniqshipments5 %>% select(shipmentid,
shipmentshippeddate,
shipmentcarrierdesc,
shipmentcontainerdesc,
shipmentorigindesc,
shipmentdestinationdesc,
shipmentitemproductdesc,
route,Alarm.Triggered,
Count.of.alarms)
}
if (input$origin != "All Origins") {
data <- data[data$shipmentorigindesc == input$origin,]
}
if (input$destination != "All Destinations") {
data <- data[data$shipmentdestinationdesc == input$destination,]
}
if (input$viewchange != "All"  && input$viewchange != "Carrier" && input$viewchange != "Container")
{
if(input$prod != "All Products")
{
data <- data[data$shipmentitemproductdesc == input$prod,]
}
}
if (input$carrier != "All Carriers") {
data <- data[data$shipmentcarrierdesc == input$carrier,]
}
if (input$color != "All Containers") {
data <- data[data$shipmentcontainerdesc == input$color,]
}
data2 <- data[data$Alarm.Triggered == TRUE,]
pct <- round((nrow(data2)/nrow(data))*100,2)
valueBox(
pct, "Alarm Rate", icon = icon("percent"),
color = "orange"
)
})
# ship_counts <- nrow(uniqshipments[as.character(uniqshipments$shipmentitemproductdesc) == input$prod & as.character(uniqshipments$shipmentorigindesc) == input$origin & as.character(uniqshipments$shipmentdestinationdesc) == input$destination,])
# alarm_counts <- nrow(uniqshipments[as.character(uniqshipments$shipmentitemproductdesc) == input$prod & as.character(uniqshipments$shipmentorigindesc) == input$origin & as.character(uniqshipments$shipmentdestinationdesc) == input$destination & uniqshipments$Alarm.Triggered == TRUE,])
# percentage_alarm <- (alarm_counts/ship_counts)*100
# percentage_alarm <- round(percentage_alarm, digits = 2)
## Data Explorer ###########################################
# observe({
#   cities <- if (is.null(input$states)) character(0) else {
#     filter(cleantable, State %in% input$states) %>%
#       `$`('City') %>%
#       unique() %>%
#       sort()
#   }
#   stillSelected <- isolate(input$cities[input$cities %in% cities])
#   updateSelectInput(session, "cities", choices = cities,
#     selected = stillSelected)
# })
observe({
destinations <- if (is.null(input$origin)) character(0) else {
filter(cleantable, Origin %in% input$origin) %>%
`$`('Destination') %>%
unique() %>%
sort()
}
stillSelected <- isolate(input$destinations[input$destinations %in% destinations])
updateSelectInput(session, "destinations", choices = destinations,
selected = stillSelected)
})
# observe({
#   products <- if (is.null(input$products)) character(0) else {
#     filter(cleantable, Product %in% input$products) %>%
#       unique() %>%
#       sort()
#   }
#   # stillSelected <- isolate(input$cities[input$cities %in% cities])
#   # updateSelectInput(session, "cities", choices = cities,
#   #   selected = stillSelected)
# })
observe({
zipcodes <- if (is.null(input$states)) character(0) else {
cleantable %>%
filter(State %in% input$states,
is.null(input$cities) | City %in% input$cities) %>%
`$`('Zipcode') %>%
unique() %>%
sort()
}
stillSelected <- isolate(input$zipcodes[input$zipcodes %in% zipcodes])
updateSelectInput(session, "zipcodes", choices = zipcodes,
selected = stillSelected)
})
observe({
if (is.null(input$goto))
return()
isolate({
map <- leafletProxy("map")
map %>% clearPopups()
dist <- 0.5
zip <- input$goto$zip
lat <- input$goto$lat
lng <- input$goto$lng
showZipcodePopup(zip, lat, lng)
map %>% fitBounds(lng - dist, lat - dist, lng + dist, lat + dist)
})
})
dt_filter <- reactive({
if (input$origininput != "All Origins") {
cleantable <- cleantable[cleantable$Origin == input$origininput,]
}
if (input$destinationinput != "All Destinations") {
cleantable <- cleantable[cleantable$Destination == input$destinationinput,]
}
if (input$productinput != "All Products") {
cleantable <- cleantable[cleantable$Product == input$productinput,]
}
if (input$carriersinput != "All Carriers") {
cleantable <- cleantable[cleantable$Carrier == input$carriersinput,]
}
if (input$containersinput != "All Containers") {
cleantable <- cleantable[cleantable$ContainerType== input$containersinput,]
}
if (input$alarminput != "No") {
cleantable <- cleantable[cleantable$Alarm == TRUE,]
}
cleantable <- cleantable[cleantable$TempMeanValue >= input$temperatureinput,]
cleantable <- cleantable[cleantable$ShipDate %in% input$dateRange]
return(cleantable)
})
output$ziptable <- DT::renderDataTable({
dt_filter()
#Score >= input$minScore,
#Score <= input$maxScore,
# cleantable$input$dateRange,
# is.null(input$productinput) | Product %in% input$productinput,
# is.null(input$carriersinput) | cleantable$Carrier %in% input$carriersinput,
# is.null(input$containersinput) | cleantable$ContainerType %in% input$containersinput,
# is.null(input$alarm) | cleantable$Alarm %in% input$alarminput
# #mutate(Action = paste('<a class="go-map" href="" data-lat="', Lat, '" data-long="', Long, '" data-zip="', Zipcode, '"><i class="fa fa-crosshairs"></i></a>', sep=""))
action <- DT::dataTableAjax(session, cleantable)
# #
DT::datatable(cleantable, rownames = FALSE,options = list(scrollX=TRUE,searchHighlight = TRUE), filter = 'top')
})
}
runApp()
shiny::runApp()
shiny::runApp()
wd
getwd()
shiny::runApp()
runApp()
runApp()
runApp()
img <- readJPEG(system.file("img", "Rlogo.jpg", package="jpeg"))
install.packages("readJPEG")
load.image("Plot.JPG")
print("Plot.JPG")
install.packages("readbitmap")
load.image("Plot.JPG")
myJPG <- raster("colourfulPic.jpg")
install.packages("raster")
myJPG <- raster("colourfulPic.jpg")
myJPG <- raster("Plot.JPG")
install.packages("rgdal")
library(rgdal)
library(raster)
myJPG <- raster("Plot.JPG")
library(readbitmap)
load.image("Plot.JPG")
library(imager)
install.packages("imager")
library(imager)
plot(Plot.jpg)
plot("Plot.JPG")
?plot
plot("Plot.JPG")
library(grDevices)
jpeg(filename = "Plot.JPG"
)
test <- jpeg(filename = "Plot.JPG")
plot(test)
image("Plot.JPG")
print("Plot.JPG")
img <- readJPEG("lego.jpg")
install.packages("jpeg")
install.packages("jpeg")
library(jpeg)
img <- readJPEG("lego.jpg")
img <- readJPEG("Plot.jpg")
plot(1:2, type='n')
rasterImage(img, 1, 1.25, 1.1, 1)
image(img)
print(img)
plot(img)
rasterImage(img)
rasterImage(img, 1, 1.25, 1.1, 1)
dev.print(file="Plot.jpg", device=jpeg, width=600)
jpeg(filename = "Plot.jpg", width = 480, height = 480,
pointsize = 12, quality = 75, bg = "white", res = NA, ...)
jpeg(filename = "Plot.jpg", width = 480, height = 480)
library(imager)
file <- system.file('Plot.jpg',package='imager')
im <- load.image(file)
im <- load.image(img)
im <- load.image("Plot.jpg")
im <- load.image("Plot.JPG")
